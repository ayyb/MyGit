<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FileMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="fileMap"
		type="fdp.project.spring.model.NFile">
		<!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="file_id" column="file_id" />
		<result property="originName" column="originName" />
		<result property="filePath" column="filePath" />
		<result property="contentType" column="contentType" />
		<result property="fileSize" column="fileSize" />
		<result property="document_id" column="document_id" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	
	<select id="selectItem"
		parameterType="fdp.project.spring.model.NFile"
		resultMap="fileMap">
		SELECT file_id, originName, filePath,
		contentType, fileSize, document_id
		FROM file
		WHERE
		file_id=#{file_id};

	</select>
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="fdp.project.spring.model.NFile"
		resultMap="fileMap">
		SELECT file_id, originName, filePath,
		contentType, fileSize, document_id FROM file
		WHERE
		document_id = #{document_id}
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="fdp.project.spring.model.NFile"
		useGeneratedKeys="true" keyProperty="file_id">
		INSERT INTO file (originName,
		filePath, contentType, fileSize, document_id)
		VALUES (#{originName}, #{filePath},
		#{contentType}, #{fileSize}, #{document_id});
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="fdp.project.spring.model.NFile">
		DELETE FROM file 
		<where>
			<if test="file_id != null and file_id != ''">
				file_id = #{file_id}
			</if>
			<if test="document_id != null and document_id != ''">
				or document_id = #{document_id}
			</if>
		</where>
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="fdp.project.spring.model.NFile">
		UPDATE file SET originName=#{originName}, filePath=#{filePath}, contentType=#{contentType}, fileSize=#{fileSize}
		WHERE
		file_id=#{file_id};
	</update>

	<!-- 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다. count, max, min, sum, avg 함수를 사용한 
		경우 Mapper에서는 resultMap이 아닌 resulType으로 반환한다. -->
	<select id="selectCountAll"
		parameterType="fdp.project.spring.model.NFile" resultType="int">
		SELECT COUNT(*) FROM file

		<where>
			<if test="originName != null and originName != ''">
				originName LIKE concat('%', #{originName}, '%')
			</if>
		</where>
	</select>
</mapper>